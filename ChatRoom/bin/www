#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');
var io = require('socket.io'); // 加入 Socket.IO


/**
* Mongodb
*/

var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost:27017/chatroom');

var db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));

var MessageSchema = new mongoose.Schema({
    data:String
});

var MsgModel = db.model('Message',MessageSchema);
var msgEntity = new MsgModel({data:'Database Connected!!!'});


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
* socket.io
*/

var serv_io = io.listen(server);

serv_io.sockets.on('connection', function(socket) {

  MsgModel.findById("559a047b94b73278212a553a", function(err, p) {
    if (!p)
      console.log('Could not load Document');
    else {
      var allmsg="";
      allmsg = p.data;
      //console.log('allmsg='+allmsg);
      socket.emit('first', {'msg': allmsg+'\n\n成功連線，開始聊天吧！'});
    }
  });

  

  // 接收來自於瀏覽器的資料

  socket.on('client_data', function(data) {
    console.log(data.msg);
    serv_io.sockets.emit('message', {'msg': data.msg});

    MsgModel.findById("559a047b94b73278212a553a", function(err, p) {
      if (!p)
        console.log('Could not load Document');
      else {
        // do your updates here
        p.data = p.data+"\n"+data.msg;

        p.save(function(err) {
          if (err)
            console.log('error')
          else
            console.log('success')
        });
      }
    });

  });


});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
